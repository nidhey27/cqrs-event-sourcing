// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: protobuf/account_command.proto

package account_command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountCommandServiceClient is the client API for AccountCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountCommandServiceClient interface {
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Deposite(ctx context.Context, in *DespositeRequst, opts ...grpc.CallOption) (*DepositeResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type accountCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountCommandServiceClient(cc grpc.ClientConnInterface) AccountCommandServiceClient {
	return &accountCommandServiceClient{cc}
}

func (c *accountCommandServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AccountCommandService/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCommandServiceClient) Deposite(ctx context.Context, in *DespositeRequst, opts ...grpc.CallOption) (*DepositeResponse, error) {
	out := new(DepositeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AccountCommandService/Deposite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCommandServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AccountCommandService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountCommandServiceServer is the server API for AccountCommandService service.
// All implementations must embed UnimplementedAccountCommandServiceServer
// for forward compatibility
type AccountCommandServiceServer interface {
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Deposite(context.Context, *DespositeRequst) (*DepositeResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	mustEmbedUnimplementedAccountCommandServiceServer()
}

// UnimplementedAccountCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountCommandServiceServer struct {
}

func (UnimplementedAccountCommandServiceServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedAccountCommandServiceServer) Deposite(context.Context, *DespositeRequst) (*DepositeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposite not implemented")
}
func (UnimplementedAccountCommandServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedAccountCommandServiceServer) mustEmbedUnimplementedAccountCommandServiceServer() {}

// UnsafeAccountCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountCommandServiceServer will
// result in compilation errors.
type UnsafeAccountCommandServiceServer interface {
	mustEmbedUnimplementedAccountCommandServiceServer()
}

func RegisterAccountCommandServiceServer(s grpc.ServiceRegistrar, srv AccountCommandServiceServer) {
	s.RegisterService(&AccountCommandService_ServiceDesc, srv)
}

func _AccountCommandService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCommandServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AccountCommandService/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCommandServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCommandService_Deposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DespositeRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCommandServiceServer).Deposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AccountCommandService/Deposite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCommandServiceServer).Deposite(ctx, req.(*DespositeRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCommandService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCommandServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AccountCommandService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCommandServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountCommandService_ServiceDesc is the grpc.ServiceDesc for AccountCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AccountCommandService",
	HandlerType: (*AccountCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Withdraw",
			Handler:    _AccountCommandService_Withdraw_Handler,
		},
		{
			MethodName: "Deposite",
			Handler:    _AccountCommandService_Deposite_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _AccountCommandService_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/account_command.proto",
}
